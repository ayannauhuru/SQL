-- These questions are from the website https://www.sql-practice.com.
-- They use two databases, hospital and northwind and range from easy, medium, and hard in difficulty.

-- https://www.sql-practice.com

-- hospital.db
-- EASY

-- 1. Show first name, last name, and gender of patients whose gender is 'M'

SELECT first_name, last_name, gender
FROM patients
WHERE gender = 'M';

-- 2. Show first name and last name of patients who does not have allergies. (null)

SELECT first_name, last_name
FROM patients
WHERE allergies IS NULL;

-- 3. Show first name of patients that start with the letter 'C'

SELECT first_name
FROM patients
WHERE first_name LIKE 'c%';

-- 4. Show first name and last name of patients that weight within the range of 100 to 120 (inclusive)

SELECT first_name, last_name
FROM patients
WHERE weight between 100 AND 120;

-- 5. Update the patients table for the allergies column. If the patient's allergies is null then replace it with 'NKA'

UPDATE patients
SET allergies = 'NKA'
WHERE allergies IS NULL;

-- 6. Show first name and last name concatinated into one column to show their full name.

SELECT CONCAT(first_name, ' ', last_name) AS full_name
FROM patients;

-- 7. Show first name, last name, and the full province name of each patient.

SELECT first_name, last_name, province_name
FROM patients pat
JOIN province_names p_n
ON pat.province_id = p_n.province_id;

-- 8. Show how many patients have a birth_date with 2010 as the birth year.

SELECT COUNT(*)
FROM patients
WHERE YEAR(birth_date) = 2010;

-- 9. Show the first_name, last_name, and height of the patient with the greatest height.

SELECT first_name, last_name, MAX(height) AS height
FROM patients;

-- 10. Show all columns for patients who have one of the following patient_ids: 1,45,534,879,1000

SELECT *
FROM patients
WHERE patient_id IN (1, 45, 534, 879, 1000);

-- 11. Show the total number of admissions 

SELECT COUNT(*)
FROM admissions;

-- 12. Show all the columns from admissions where the patient was admitted and discharged on the same day.

SELECT *
FROM admissions
WHERE admission_date = discharge_date;

-- 13. Show the patient id and the total number of admissions for patient_id 579.

SELECT patient_id, COUNT(*)
FROM admissions
WHERE patient_id = 579;

-- 14. Based on the cities that our patients live in, show unique cities that are in province_id 'NS'?

SELECT distinct(city)
FROM patients
WHERE province_id = 'NS';

-- 15. Write a query to find the first_name, last name and birth date of patients who has height greater than 160 and weight greater than 70

SELECT first_name, last_name, birth_date
FROM patients
WHERE height > 160
AND weight > 70;

-- 16. Write a query to find list of patients first_name, last_name, and allergies where allergies are not null and are from the city of 'Hamilton'

SELECT first_name, last_name, allergies
FROM patients
WHERE allergies is not NULL
AND city = 'Hamilton';

———————— 

-- hospital.db
-- MEDIUM

-- 1. Show unique birth years from patients and order them by ascending.

SELECT distinct(YEAR(birth_date)) AS birth_year
FROM patients
ORDER BY birth_year ASC;

-- 2. Show unique first names from the patients table which only occurs once in the list.
-- For example, if two or more people are named 'John' in the first_name column then don't include their name in the output list.
-- If only 1 person is named 'Leo' then include them in the output.
 
SELECT DISTINCT first_name 
FROM patients
GROUP BY first_name
HAVING COUNT(first_name) = 1;

-- 3. Show patient_id and first_name from patients where their first_name start and ends with 's' and is at least 6 characters long.

SELECT patient_id, first_name
FROM patients
WHERE first_name LIKE 'S%s'
AND LENGTH(first_name) >= 6;

-- 4. Show patient_id, first_name, last_name from patients whose diagnosis is 'Dementia'. Primary diagnosis is stored in the admissions table.

SELECT p.patient_id, p.first_name, p.last_name
FROM patients p
JOIN admissions a
ON p.patient_id = a.patient_id
WHERE a.diagnosis = 'Dementia';

-- 5. Display every patient's first_name. Order the list by the length of each name and then by alphabetically.

SELECT first_name
FROM patients
ORDER BY LENGTH(first_name), first_name;

-- 6. Show the total amount of male patients and the total amount of female patients in the patients table. Display the two results in the same row.

SELECT
(	SELECT COUNT(*) 
	FROM patients
	WHERE gender = 'M' ) AS male_count,
(	SELECT COUNT(*) 
	FROM patients
	WHERE gender = 'F' ) AS female_count;

-- 7. Show first and last name, allergies from patients which have allergies to either 'Penicillin' or 'Morphine'.
-- Show results ordered ascending by allergies then by first_name then by last_name.

SELECT first_name, last_name, allergies
FROM patients
WHERE allergies IN ('Penicillin', 'Morphine')
ORDER BY allergies, first_name, last_name;

-- 8. Show patient_id, diagnosis from admissions. Find patients admitted multiple times for the same diagnosis.

SELECT patient_id, diagnosis
FROM admissions
GROUP BY patient_id, diagnosis
HAVING COUNT(diagnosis) > 1;

-- 9. Show the city and the total number of patients in the city. Order from most to least patients and then by city name ascending.

SELECT city, COUNT(patient_id) AS patient_count
FROM patients
GROUP BY city
ORDER BY patient_count desc, city asc;

-- 10. Show first name, last name and role of every person that is either patient or doctor. The roles are either "Patient" or "Doctor"

SELECT first_name, last_name, 'patient' AS role
FROM patients
UNION ALL
SELECT first_name, last_name, 'doctor' AS role
FROM doctors;

-- 11. Show all allergies ordered by popularity. Remove NULL values from query.

SELECT allergies, COUNT(allergies) AS total_diagnoses
FROM patients
WHERE allergies IS NOT NULL
GROUP BY (allergies)
ORDER BY COUNT(allergies) DESC;

-- 12. Show all patient's first_name, last_name, and birth_date who were born in the 1970s decade. Sort the list starting from the earliest birth_date.

SELECT first_name, last_name, birth_date
FROM patients
WHERE YEAR(birth_date) between 1970 AND 1979
order by birth_date ASC;

-- 13. We want to display each patient's full name in a single column. Their last_name in all upper letters must appear first,
-- then first_name in all lower case letters. Separate the last_name and first_name with a comma.
-- Order the list by the first_name in decending order EX: SMITH, jane

SELECT CONCAT(UPPER(last_name), ', ', LOWER(first_name)) AS full_name
FROM patients
ORDER BY first_name DESC;

-- 14. Show the province_id(s), sum of height; where the total sum of its patients’ height is greater than or equal to 7,000.

SELECT province_id, SUM(height) AS total_height
FROM patients
GROUP BY province_id
HAVING total_height >= 7000;

-- 15. Show the difference between the largest weight and smallest weight for patients with the last name 'Maroni'

SELECT (max(weight) - Min(weight)) AS weight_delta
FROM patients
WHERE last_name = 'Maroni';

-- 16. Show all of the days of the month (1-31) and how many admission_dates occurred on that day. Sort by the day with most admissions to least admissions.

SELECT DISTINCT DAY(admission_date) AS day_number,
COUNT(*) AS count_of_admissions
FROM admissions
GROUP BY day_number
ORDER BY count_of_admissions DESC;

-- 17. Show all columns for patient_id 542's most recent admission_date.

SELECT *
FROM admissions
GROUP BY patient_id
HAVING patient_id = 542
AND MAX(admission_date);

-- 18. Show patient_id, attending_doctor_id, and diagnosis for admissions that match one of the two criteria:
--  1. patient_id is an odd number and attending_doctor_id is either 1, 5, or 19.
--  2. attending_doctor_id contains a 2 and the length of patient_id is 3 characters.

SELECT patient_id, attending_doctor_id, diagnosis
FROM admissions
WHERE
	(MOD(patient_id, 2) != 0
     	AND attending_doctor_id IN (1, 5, 19))
OR
	(attending_doctor_id LIKE '%2%'
    	AND length(patient_id) = 3);

-- 19. Show first_name, last_name, and the total number of admissions attended for each doctor. Every admission has been attended by a doctor.

SELECT first_name, last_name,
COUNT(admission_date) AS total_admissions
FROM doctors doc
JOIN admissions ad
ON doc.doctor_id = ad.attending_doctor_id
GROUP BY doctor_id;

-- 20. For each doctor, display their id, full name, and the first and last admission date they attended.

SELECT doctor_id, CONCAT(first_name, ' ', last_name)
AS full_name,
MIN(admission_date) AS first_admission,
MAX(admission_date) AS last_admission
FROM doctors doc
JOIN admissions ad
ON doc.doctor_id = ad.attending_doctor_id
GROUP BY doctor_id;

-- 21. Display the total amount of patients for each province. Order by descending.

SELECT province_name,
COUNT(patient_id) AS patient_count
FROM province_names p_n
JOIN patients pat
ON p_n.province_id = pat.province_id
GROUP BY p_n.province_id
ORDER BY patient_count DESC;

-- 22. For every admission, display the patient's full name, their admission diagnosis, and their doctor's full name who diagnosed their problem.

SELECT CONCAT(p.first_name, ' ', p.last_name) AS patient,
a.diagnosis, CONCAT(d.first_name, ' ', d.last_name) AS doctor
FROM patients p
JOIN admissions a
ON p.patient_id = a.patient_id
JOIN doctors d
ON d.doctor_id = a.attending_doctor_id;

-- 23. Display the first name, last name and number of duplicate patients based on their first name and last name. 
-- Ex: A patient with an identical name can be considered a duplicate.

SELECT first_name,
last_name, 
COUNT(*) AS num_of_duplicates
FROM patients
GROUP BY first_name, last_name
HAVING COUNT(*) > 1;

-- 24. Display patient's full name, height in the units feet rounded to 1 decimal,
-- weight in the unit pounds rounded to 0 decimals, birth_date, gender non abbreviated.
--  Convert CM to feet by dividing by 30.48.
--  Convert KG to pounds by multiplying by 2.205.

SELECT CONCAT(first_name, ' ', last_name) AS patient,
ROUND((height / 30.48), 1) AS 'height (ft)' ,
ROUND((weight * 2.205)) AS 'weight (lbs)' ,
birth_date,
CASE
	WHEN gender = 'M' THEN 'male'
    WHEN gender = 'F' THEN 'female'
END AS gender
FROM patients;

-- 25. Show patient_id, first_name, last_name from patients whose does not have any records in the admissions table.
-- (Their patient_id does not exist in any admissions.patient_id rows.)

SELECT patient_id, first_name, last_name
FROM patients
WHERE patient_id NOT IN (SELECT patient_id FROM admissions);

-- OR 

SELECT p.patient_id, p.first_name, p.last_name
from patients p
left join admissions a
on p.patient_id = a.patient_id
where a.patient_id is NULL;

———————— 

-- hospital.db
-- HARD

-- 1. Show all of the patients grouped into weight groups.
--  Show the total amount of patients in each weight group.
--  Order the list by the weight group decending.
-- For example, if they weight 100 to 109 they are placed in the 100 weight group, 110-119 = 110 weight group, etc.

SELECT
  COUNT(patient_id) AS patients_in_group,
  FLOOR(weight / 10) * 10 AS weight_group
FROM patients
GROUP BY weight_group
ORDER BY weight_group DESC;

-- 2. Show patient_id, weight, height, isObese from the patients table.
--  Display isObese as a boolean 0 or 1.
--  Obese is defined as weight(kg)/(height(m)2) >= 30.
--  weight is in units kg.
--  height is in units cm.

SELECT patient_id, weight, height,
CASE
    WHEN (weight)/(POWER(height/100.0, 2)) >= 30 THEN 1
    ELSE 0
END AS isObese
FROM patients;

-- 3. Show patient_id, first_name, last_name, and attending doctor's specialty. Show only the patients who has a diagnosis as 'Epilepsy' and the doctor's first name is 'Lisa'
-- Check patients, admissions, and doctors tables for required information.

SELECT p.patient_id,
p.first_name AS patient_first_name,
p.last_name AS patient_last_name,
d.specialty AS attending_doctor_specialty
FROM patients p
join admissions a
ON p.patient_id = a.patient_id
JOIN doctors d
ON a.attending_doctor_id = d.doctor_id
WHERE a.diagnosis = 'Epilepsy'
AND d.first_name = 'Lisa';

-- 4. All patients who hav gone through admissions, can see their medical documents on our site.
-- Those patients are given a temporary password after their first admission. Show the patient_id and temp_password. 
--  The password must be the following, in order:
--    1. patient_id
--    2. the numerical length of patient's last_name
--    3. year of patient's birth_date

SELECT p.patient_id,
CONCAT(p.patient_id, LENGTH(p.last_name), YEAR(p.birth_date))
AS temp_password
FROM patients p
JOIN admissions a
ON p.patient_id = a.patient_id
GROUP BY p.patient_id;

--  5. Each admission costs $50 for patients without insurance, and $10 for patients with insurance. All patients with an even patient_id have insurance. 
-- Give each patient a 'Yes' if they have insurance, and a 'No' if they don't have insurance. Add up the admission_total cost for each has_insurance group.

SELECT has_insurance,
SUM(admission_cost) as admission_total
FROM
(
   SELECT patient_id,
   CASE WHEN patient_id % 2 = 0
   THEN 'Yes' ELSE 'No' END AS has_insurance,
   CASE WHEN patient_id % 2 = 0
   THEN 10 ELSE 50 end AS admission_cost
   FROM admissions
)
GROUP BY has_insurance;

-- 6. Show the provinces that has more patients identified as 'M' than 'F'. Must only show full province_name

SELECT p_n.province_name
FROM province_names p_n
JOIN patients p
ON p_n.province_id = p.province_id
GROUP BY p_n.province_name
HAVING SUM(gender = 'M') > SUM(gender = 'F');

-- 7. We are looking for a specific patient. Pull all columns for the patient who matches the following criteria:
--  - First_name contains an 'r' after the first two letters.
--  - Identifies their gender as 'F'
--  - Born in February, May, or December
--  - Their weight would be between 60kg and 80kg
--  - Their patient_id is an odd number
--  - They are from the city 'Kingston'

SELECT *
FROM patients
WHERE first_name LIKE '__r%'
AND gender = 'F'
AND MONTH(birth_date) in (2, 5, 12)
AND weight BETWEEN 60 AND 80
AND MOD(patient_id, 2) != 0
AND city = 'Kingston';

-- 8. Show the percent of patients that have 'M' as their gender. Round the answer to the nearest hundreth number and in percent form.

SELECT
CONCAT(round(100 * avg(gender = 'M'), 2), '%')
AS percent_of_male_patients
FROM patients;

-- 9. For each day display the total amount of admissions on that day. Display the amount changed from the previous date.

SELECT admission_date,
COUNT(admission_date),
COUNT(admission_date) -
LAG(COUNT(admission_date)) OVER(
	ORDER BY admission_date
	) 'admission_count_change'
FROM admissions
GROUP BY admission_date;

-- 10. Sort the province names in ascending order in such a way that the province 'Ontario' is always on top.

SELECT province_name
FROM province_names
order by (CASE WHEN province_name = 'Ontario' THEN 0 ELSE 1 END),
province_name ASC;

-- 11. We need a breakdown for the total amount of admissions each doctor has started each year.
-- Show the doctor_id, doctor_full_name, specialty, year, total_admissions for that year.

SELECT d.doctor_id,
CONCAT(d.first_name, ' ', d.last_name) AS doctor,
d.specialty,
year(admission_date) AS selected_year,
COUNT(admission_date) AS total_admissions
FROM doctors d
JOIN admissions a
ON d.doctor_id = a.attending_doctor_id
GROUP BY d.doctor_id, selected_year;


-- northwind.db
-- EASY

-- 1. Show the category_name and description from the categories table sorted by category_name.

SELECT category_name, description
FROM categories
ORDER BY category_name;

-- 2. Show all the contact_name, address, city of all customers which are not from 'Germany', 'Mexico', 'Spain'

SELECT contact_name, address, city
FROM customers
WHERE country not IN ('Germany', 'Mexico', 'Spain');

-- 3. Show order_date, shipped_date, customer_id, Freight of all orders placed on 2018 Feb 26

SELECT order_date, shipped_date, customer_id, freight
FROM orders
WHERE order_date = '2018-02-26'

-- 4. Show the employee_id, order_id, customer_id, required_date, shipped_date from all orders shipped later than the required date

SELECT employee_id, order_id, customer_id, required_date, 
shipped_date
FROM orders
WHERE shipped_date > required_date;

-- 5. Show all the even numbered Order_id from the orders table

SELECT order_id
FROM orders
WHERE MOD(order_id, 2) = 0;

-- OR

SELECT order_id
FROM orders
WHERE order_id % 2 = 0;

-- 6. Show the city, company_name, contact_name of all customers from cities which contains the letter 'L' in the city name, sorted by contact_name

SELECT city, company_name, contact_name
from customers
WHERE city like '%L%'
ORDER BY contact_name;

-- 7. Show the company_name, contact_name, fax number of all customers that has a fax number. (not null)

SELECT company_name, contact_name, fax
FROM customers
WHERE fax is not NULL;

-- 8. Show the first_name, last_name. hire_date of the most recently hired employee.

SELECT first_name,
last_name,
MAX(hire_date) AS hire_date
FROM employees;

-- 9. Show the average unit price rounded to 2 decimal places, the total units in stock, total discontinued products from the products table.

SELECT ROUND(AVG(unit_price), 2) as avg_price, 
SUM(units_in_stock) AS total_stock,
SUM(discontinued) AS total_discontinued
FROM products;

———————— 

-- northwind.db
-- MEDIUM

-- 1. Show the ProductName, CompanyName, CategoryName from the products, suppliers, and categories table

SELECT p.product_name, s.company_name, c.category_name
FROM products p
JOIN suppliers s
ON p.supplier_id = s.supplier_id
JOIN categories c
ON p.category_id = c.category_id;

-- 2. Show the category_name and the average product unit price for each category rounded to 2 decimal places.

SELECT c.category_name, ROUND(AVG(p.unit_price), 2) AS avg_unit_price
FROM categories c
JOIN products p
ON c.category_id = p.category_id
GROUP BY c.category_name;

-- 3. Show the city, company_name, contact_name from the customers and suppliers table merged together.
-- Create a column which contains 'customers' or 'suppliers' depending on the table it came from.

SELECT city, company_name, contact_name, 'customers' AS 'relationship'
FROM customers
UNION
SELECT city, company_name, contact_name, 'suppliers' AS 'relationship'
FROM suppliers;

———————— 

-- northwind.db
-- HARD

-- 1. Show the employee's first_name and last_name, a "num_orders" column with a count of the orders taken,
-- and a column called "Shipped" that displays "On Time" if the order shipped_date is less or equal to the required_date,
-- "Late" if the order shipped late. 
-- Order by employee last_name, then by first_name, and then descending by number of orders.

SELECT e.first_name,
e.last_name,
COUNT(o.order_id) AS num_orders,
CASE
    WHEN o.shipped_date <= required_date THEN 'on time'
    ELSE 'late'
    END AS shipped
FROM employees e
JOIN orders o
ON e.employee_id = o.employee_id
GROUP BY e.employee_id, shipped
ORDER BY e.last_name, e.first_name, num_orders DESC;

-- 2. Show how much money the company lost due to giving discounts each year, order the years from most recent to least recent. Round to 2 decimal places

SELECT DISTINCT YEAR(o.order_date) AS order_year,
ROUND(SUM(p.unit_price * o_d.quantity * o_d.discount), 2) AS discount_amount
FROM orders o
JOIN order_details o_d
ON o.order_id = o_d.order_id
JOIN products p
ON o_d.product_id = p.product_id
GROUP BY order_year
ORDER BY order_year DESC;


